{"ast":null,"code":"var _jsxFileName = \"/home/asad/Cloud-Computing/Quarter 3/Class 04 01-august-2021/2. API_with_react_with_graphql/src/githubGraphQL5.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport GithubGraphQL1 from './githubGraphQL1';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst api = axios.create({\n  method: 'get',\n  responseType: 'json',\n  baseURL: 'https://api.github.com',\n  headers: {\n    Authorization: `bearer ${process.env.REACT_APP_GITHUB_ACCESS_TOKEN}`\n  }\n});\n\nconst fetchData = async setData => {\n  const MUTATION_REPOSITORY = `mutation AddOrRemoveStar (\n        $repoID: ID!,\n        $flag: Boolean!){\n        addStar(input: {starrableId: $repoID}) @include(if: $flag) {\n          starrable {\n            viewerHasStarred\n          }\n        }\n        \n        removeStar(input: {starrableId: $repoID}) @skip(if: $flag) {\n          starrable {\n            viewerHasStarred\n          }\n        }\n      }`;\n  const {\n    data: {\n      data: {\n        removeStar\n      }\n    }\n  } = await api.post('/graphql', {\n    query: MUTATION_REPOSITORY,\n    variables: {\n      repoID: \"MDEwOlJlcG9zaXRvcnkzOTc5ODI5MDQ=\",\n      flag: false\n    }\n  });\n  setData(removeStar);\n};\n\nfunction GithubGraphQL5() {\n  _s();\n\n  let [data, setData] = useState(null);\n  useEffect(() => {\n    fetchData(setData);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: [\"UserData:\", data && JSON.stringify(data, null, 4)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GithubGraphQL5, \"fQZRxy/+nAZ7NLS1X4dVhrlp8Go=\");\n\n_c = GithubGraphQL5;\nexport default GithubGraphQL5;\n\nvar _c;\n\n$RefreshReg$(_c, \"GithubGraphQL5\");","map":{"version":3,"sources":["/home/asad/Cloud-Computing/Quarter 3/Class 04 01-august-2021/2. API_with_react_with_graphql/src/githubGraphQL5.js"],"names":["useState","useEffect","axios","GithubGraphQL1","api","create","method","responseType","baseURL","headers","Authorization","process","env","REACT_APP_GITHUB_ACCESS_TOKEN","fetchData","setData","MUTATION_REPOSITORY","data","removeStar","post","query","variables","repoID","flag","GithubGraphQL5","JSON","stringify"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAN,CAAa;AACrBC,EAAAA,MAAM,EAAE,KADa;AAErBC,EAAAA,YAAY,EAAE,MAFO;AAGrBC,EAAAA,OAAO,EAAE,wBAHY;AAIrBC,EAAAA,OAAO,EAAE;AACLC,IAAAA,aAAa,EAAG,UAASC,OAAO,CAACC,GAAR,CAAYC,6BAA8B;AAD9D;AAJY,CAAb,CAAZ;;AASA,MAAMC,SAAS,GAAG,MAAMC,OAAN,IAAkB;AAChC,QAAMC,mBAAmB,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAdI;AAeA,QAAM;AAAEC,IAAAA,IAAI,EAAE;AAAEA,MAAAA,IAAI,EAAE;AAAEC,QAAAA;AAAF;AAAR;AAAR,MAAqC,MAAMd,GAAG,CAACe,IAAJ,CAAS,UAAT,EAC7C;AACIC,IAAAA,KAAK,EAAEJ,mBADX;AAEIK,IAAAA,SAAS,EAAE;AACPC,MAAAA,MAAM,EAAE,kCADD;AAEPC,MAAAA,IAAI,EAAE;AAFC;AAFf,GAD6C,CAAjD;AASAR,EAAAA,OAAO,CAACG,UAAD,CAAP;AACH,CA1BD;;AA4BA,SAASM,cAAT,GAA0B;AAAA;;AACtB,MAAI,CAACP,IAAD,EAAOF,OAAP,IAAkBf,QAAQ,CAAC,IAAD,CAA9B;AAEAC,EAAAA,SAAS,CAAC,MAAI;AACVa,IAAAA,SAAS,CAACC,OAAD,CAAT;AACH,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACI;AAAA,2BACI;AAAA,8BAEME,IAAI,IAAIQ,IAAI,CAACC,SAAL,CAAeT,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;GAfQO,c;;KAAAA,c;AAgBT,eAAeA,cAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport GithubGraphQL1 from './githubGraphQL1';\n\nconst api = axios.create({\n    method: 'get',\n    responseType: 'json',\n    baseURL: 'https://api.github.com',\n    headers: {\n        Authorization: `bearer ${process.env.REACT_APP_GITHUB_ACCESS_TOKEN}`\n    }\n});\n\nconst fetchData = async(setData) => {\n    const MUTATION_REPOSITORY = `mutation AddOrRemoveStar (\n        $repoID: ID!,\n        $flag: Boolean!){\n        addStar(input: {starrableId: $repoID}) @include(if: $flag) {\n          starrable {\n            viewerHasStarred\n          }\n        }\n        \n        removeStar(input: {starrableId: $repoID}) @skip(if: $flag) {\n          starrable {\n            viewerHasStarred\n          }\n        }\n      }`;\n    const { data: { data: { removeStar } } } = await api.post('/graphql',\n        { \n            query: MUTATION_REPOSITORY,\n            variables: {\n                repoID: \"MDEwOlJlcG9zaXRvcnkzOTc5ODI5MDQ=\",\n                flag: false\n            }\n        }\n    );\n    setData(removeStar);\n}\n\nfunction GithubGraphQL5() {\n    let [data, setData] = useState(null);\n\n    useEffect(()=>{\n        fetchData(setData);\n    }, []);\n\n    return (\n        <div>\n            <pre>\n                UserData:\n                { data && JSON.stringify(data, null, 4)}\n            </pre>\n        </div>\n    );\n}\nexport default GithubGraphQL5;\n"]},"metadata":{},"sourceType":"module"}
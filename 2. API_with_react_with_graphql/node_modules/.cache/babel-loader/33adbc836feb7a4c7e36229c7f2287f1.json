{"ast":null,"code":"var _jsxFileName = \"/home/asad/Cloud-Computing/Quarter 3/Class 04 01-august-2021/2. API_with_react_with_graphql/src/githubGraphQL1.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst token = process.env.REACT_APP_GITHUB_ACCESS_TOKEN;\nconst instance = axios.create({\n  method: 'get',\n  responseType: 'json',\n  baseURL: 'https://api.github.com',\n  headers: {\n    Authorization: `bearer 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`\n  }\n});\n\nconst fetchData = async userData => {\n  const QUERY_ORGANIZATION = `query {\n        organization(login: \"facebook\") {\n            name\n            email\n            id\n            url\n            description\n        }\n    }`;\n  const {\n    data\n  } = await instance.post( // GraphQL always have \"POST\" request\n  '/graphql', {\n    query: QUERY_ORGANIZATION\n  });\n  userData[1](data);\n};\n\nfunction GithubGraphQL1() {\n  _s();\n\n  let userData = useState(null); // equals to [data, setData] = useState(null)\n\n  console.log(token);\n  useEffect(() => {\n    fetchData(userData); // passed this hook to store our api in fetchData function\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: [\"UserData:\", userData[0] && JSON.stringify(userData[0], null, 4)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GithubGraphQL1, \"qteAJh8w2YC3une+p9RciMCeBGU=\");\n\n_c = GithubGraphQL1;\nexport default GithubGraphQL1;\n\nvar _c;\n\n$RefreshReg$(_c, \"GithubGraphQL1\");","map":{"version":3,"sources":["/home/asad/Cloud-Computing/Quarter 3/Class 04 01-august-2021/2. API_with_react_with_graphql/src/githubGraphQL1.js"],"names":["useEffect","useState","axios","token","process","env","REACT_APP_GITHUB_ACCESS_TOKEN","instance","create","method","responseType","baseURL","headers","Authorization","fetchData","userData","QUERY_ORGANIZATION","data","post","query","GithubGraphQL1","console","log","JSON","stringify"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,KAAK,GAAGC,OAAO,CAACC,GAAR,CAAYC,6BAA1B;AAEA,MAAMC,QAAQ,GAAGL,KAAK,CAACM,MAAN,CAAa;AAC1BC,EAAAA,MAAM,EAAE,KADkB;AAE1BC,EAAAA,YAAY,EAAE,MAFY;AAG1BC,EAAAA,OAAO,EAAE,wBAHiB;AAI1BC,EAAAA,OAAO,EAAE;AACLC,IAAAA,aAAa,EAAG;AADX;AAJiB,CAAb,CAAjB;;AASA,MAAMC,SAAS,GAAG,MAAOC,QAAP,IAAoB;AAClC,QAAMC,kBAAkB,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MARI;AASA,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMV,QAAQ,CAACW,IAAT,EAAiB;AACpC,YADmB,EAEnB;AAAEC,IAAAA,KAAK,EAAEH;AAAT,GAFmB,CAAvB;AAIAD,EAAAA,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ;AACH,CAfD;;AAiBA,SAASG,cAAT,GAA0B;AAAA;;AACtB,MAAIL,QAAQ,GAAGd,QAAQ,CAAC,IAAD,CAAvB,CADsB,CACU;;AAChCoB,EAAAA,OAAO,CAACC,GAAR,CAAYnB,KAAZ;AACAH,EAAAA,SAAS,CAAC,MAAM;AACZc,IAAAA,SAAS,CAACC,QAAD,CAAT,CADY,CACY;AAC3B,GAFQ,CAAT;AAIA,sBACI;AAAA,2BACI;AAAA,8BAEKA,QAAQ,CAAC,CAAD,CAAR,IAAeQ,IAAI,CAACC,SAAL,CAAeT,QAAQ,CAAC,CAAD,CAAvB,EAA4B,IAA5B,EAAkC,CAAlC,CAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;GAfQK,c;;KAAAA,c;AAgBT,eAAeA,cAAf","sourcesContent":["import { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nconst token = process.env.REACT_APP_GITHUB_ACCESS_TOKEN;\n\nconst instance = axios.create({\n    method: 'get',  \n    responseType: 'json',\n    baseURL: 'https://api.github.com',\n    headers: {\n        Authorization: `bearer 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`\n    }\n});\n\nconst fetchData = async (userData) => {\n    const QUERY_ORGANIZATION = `query {\n        organization(login: \"facebook\") {\n            name\n            email\n            id\n            url\n            description\n        }\n    }`;\n    const { data } = await instance.post(   // GraphQL always have \"POST\" request\n        '/graphql',\n        { query: QUERY_ORGANIZATION }\n    );\n    userData[1](data);\n}\n\nfunction GithubGraphQL1() {\n    let userData = useState(null);  // equals to [data, setData] = useState(null)\n    console.log(token);\n    useEffect(() => {\n        fetchData(userData);    // passed this hook to store our api in fetchData function\n    });\n\n    return (\n        <div>\n            <pre>\n                UserData:\n                {userData[0] && JSON.stringify(userData[0], null, 4)}\n            </pre>\n        </div>\n    );\n}\nexport default GithubGraphQL1;"]},"metadata":{},"sourceType":"module"}
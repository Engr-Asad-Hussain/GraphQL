{"ast":null,"code":"var _jsxFileName = \"/home/asad/Cloud-Computing/Quarter 3/Class 04 01-august-2021/2. API_with_react_with_graphql/src/githubGraphQL4.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst api = axios.create({\n  baseURL: 'https://api.github.com',\n  // Github\n  headers: {\n    Authorization: `bearer ${process.env.REACT_APP_GITHUB_ACCESS_TOKEN}` // access token\n\n  }\n});\n\nfunction GithubAPI() {\n  _s();\n\n  // const fetchData_js = async (organizationName) => {\n  //     const QUERY_ORGANIZATION = `query {\n  //         organization(login: \"${organizationName}\") {\n  //             name\n  //             description\n  //             url\n  //             createdAt\n  //         }\n  //         viewer {\n  //             login\n  //             email\n  //             company\n  //             repositories(first: 5) {\n  //                 edges {\n  //                     node {\n  //                         name\n  //                     }\n  //                 }\n  //             }\n  //         }\n  //     }`;\n  //     const res = await api.post('/graphql', { query: QUERY_ORGANIZATION })\n  //     console.log('GraphQL Response: ', res);\n  // }\n  const fetchData_ql = async organizationName => {\n    const QUERY_ORGANIZATION = `query queryOrganization($organizationName: String!){\n            organization(login: $organizationName) {\n                name\n                description\n                url\n                createdAt\n            }\n            viewer {\n                login\n                email\n                company\n                repositories(first: 5) {\n                    edges {\n                        node {\n                            name\n                        }\n                    }\n                }\n            }\n        }`;\n    const res = await api.post('/graphql', {\n      query: QUERY_ORGANIZATION,\n      variables: {\n        organizationName\n      }\n    });\n    console.log('GraphQL Response: ', res);\n  };\n\n  useEffect(() => {\n    fetchData_ql(\"qutbITech\"); // addStart('MDEwOlJlcG9zaXRvcnkzODc1MTIzNjA=')\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GithubAPI, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = GithubAPI;\nexport default GithubAPI;\n\nvar _c;\n\n$RefreshReg$(_c, \"GithubAPI\");","map":{"version":3,"sources":["/home/asad/Cloud-Computing/Quarter 3/Class 04 01-august-2021/2. API_with_react_with_graphql/src/githubGraphQL4.js"],"names":["useEffect","axios","api","create","baseURL","headers","Authorization","process","env","REACT_APP_GITHUB_ACCESS_TOKEN","GithubAPI","fetchData_ql","organizationName","QUERY_ORGANIZATION","res","post","query","variables","console","log"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAN,CAAa;AACrBC,EAAAA,OAAO,EAAE,wBADY;AACmB;AACxCC,EAAAA,OAAO,EAAE;AACLC,IAAAA,aAAa,EAAG,UAASC,OAAO,CAACC,GAAR,CAAYC,6BAA8B,EAD9D,CACkE;;AADlE;AAFY,CAAb,CAAZ;;AAOA,SAASC,SAAT,GAAqB;AAAA;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA,QAAMC,YAAY,GAAG,MAAOC,gBAAP,IAA4B;AAE7C,UAAMC,kBAAkB,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAnBQ;AAqBA,UAAMC,GAAG,GAAG,MAAMZ,GAAG,CAACa,IAAJ,CAAS,UAAT,EAAqB;AACnCC,MAAAA,KAAK,EAAEH,kBAD4B;AAEnCI,MAAAA,SAAS,EAAE;AACPL,QAAAA;AADO;AAFwB,KAArB,CAAlB;AAMAM,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCL,GAAlC;AACH,GA9BD;;AAiCAd,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,YAAY,CAAC,WAAD,CAAZ,CADY,CAEZ;AACH,GAHQ,EAGN,EAHM,CAAT;AAOA,sBACI;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GAzEQD,S;;KAAAA,S;AA2ET,eAAeA,SAAf","sourcesContent":["import { useEffect } from 'react'\nimport axios from 'axios'\n\nconst api = axios.create({\n    baseURL: 'https://api.github.com',      // Github\n    headers: {\n        Authorization: `bearer ${process.env.REACT_APP_GITHUB_ACCESS_TOKEN}`,  // access token\n    }\n});\n\nfunction GithubAPI() {\n\n    // const fetchData_js = async (organizationName) => {\n    //     const QUERY_ORGANIZATION = `query {\n    //         organization(login: \"${organizationName}\") {\n    //             name\n    //             description\n    //             url\n    //             createdAt\n    //         }\n    //         viewer {\n    //             login\n    //             email\n    //             company\n    //             repositories(first: 5) {\n    //                 edges {\n    //                     node {\n    //                         name\n    //                     }\n    //                 }\n    //             }\n    //         }\n    //     }`;\n\n    //     const res = await api.post('/graphql', { query: QUERY_ORGANIZATION })\n    //     console.log('GraphQL Response: ', res);\n    // }\n\n    const fetchData_ql = async (organizationName) => {\n\n        const QUERY_ORGANIZATION = `query queryOrganization($organizationName: String!){\n            organization(login: $organizationName) {\n                name\n                description\n                url\n                createdAt\n            }\n            viewer {\n                login\n                email\n                company\n                repositories(first: 5) {\n                    edges {\n                        node {\n                            name\n                        }\n                    }\n                }\n            }\n        }`;\n\n        const res = await api.post('/graphql', {\n            query: QUERY_ORGANIZATION,\n            variables: {\n                organizationName\n            }\n        })\n        console.log('GraphQL Response: ', res);\n    }\n\n    \n    useEffect(() => {\n        fetchData_ql(\"qutbITech\")\n        // addStart('MDEwOlJlcG9zaXRvcnkzODc1MTIzNjA=')\n    }, [])\n\n\n\n    return (\n        <div>\n\n        </div>\n    );\n}\n\nexport default GithubAPI;"]},"metadata":{},"sourceType":"module"}